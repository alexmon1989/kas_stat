/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 1 */

/* WEBPACK VAR INJECTION */

/* harmony export (binding) */

/* unused harmony export hasNavigatorSupport */

/* unused harmony export userAgent */

/* unused harmony export isIE */

/* unused harmony export getEnv */

/**
 * Utilities to get information about the current environment
 */

// --- Constants ---

// This function will be called when the browser

// attempts to access the passive property.

/* istanbul ignore next: will never be called in JSDOM */

// Edge 15 and UC Browser lack support for `isIntersecting`

// but we an use intersectionRatio > 0 instead

// 'isIntersecting' in window.IntersectionObserverEntry.prototype &&

/* 2 */

/* 3 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 4 */

/* 5 */

/* 6 */

/* 7 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 8 */

// Thank's IE8 for his funny defineProperty

/* 9 */

/* empty */

/* 10 */

// 7.1.13 ToObject(argument)

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 17 */

/* 18 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 19 */

/* 20 */

// optional / simple context binding

/* 21 */

/* 22 */

// 7.1.4 ToInteger

/* 23 */

// eslint-disable-next-line no-useless-call

/* 24 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 25 */

// 7.2.1 RequireObjectCoercible(argument)

/* 26 */

// most Object methods by ES6 should accept primitives

/* 27 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 28 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 29 */

/* 30 */

/* 31 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 32 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 33 */

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 34 */

/* 35 */

/* 36 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 37 */

/* 38 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 39 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 40 */

/* 41 */

/* 42 */

// fast case for arrays with default iterator

/* 43 */

/* 44 */

/* 45 */

/* 46 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 47 */

/* 48 */

/* 49 */

/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */

/* 50 */

/*! 
  * portal-vue © Thorsten Lünborg, 2019 
  * 
  * Version: 2.1.6
  * 
  * LICENCE: MIT 
  * 
  * https://github.com/linusborg/portal-vue
  * 
 */

// Copying the array here so that the PortalTarget change event will actually contain two distinct arrays

// Internal

/**
       * TODO
       * This should warn as well ...
       */

// only when we have a transition, because it causes a re-render

// can't be a computed prop because it has to "react" to $slot changes.

// can't be a computed prop because it has to "react" to this.children().

// if we have a transition component, pass the tag if it exists

// Portal

// name for the portal

// name for the target

// Target

// Target already exists

// get props for target from $props

// we have to rename a few of them

// if there's no "manual" scoped slot, so we create a <Portal> ourselves

// else, we render the scoped slot

// if user used <template> for the scoped slot

// content will be an array

/* 51 */

/* 52 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 53 */

/* 54 */

// 21.2.5.3 get RegExp.prototype.flags

/* 55 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 56 */

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */

// NOTE: 1 DOM access here

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */

// Return body, `getScroll` will take care to get the correct `scrollTop` from it

// Firefox want us to check `-x` and `-y` variations as well

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */

// Skip hidden elements which don't have an offsetParent

// .offsetParent will return the closest TH, TD or TABLE in case

// no offsetParent is present, I hate this job...

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */

// This check is needed to avoid errors in case one of the elements isn't defined for any reason

// Here we make sure to give as "start" the element that comes first in the DOM

// Both nodes are inside #document

// one of the nodes is inside shadowDOM, find which one

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */

// IE10 10 FIX: Please, don't ask, the element isn't

// considered in DOM in some circumstances...

// This isn't reproducible in IE10 compatibility mode of IE11

// subtract scrollbar size from sizes

// if an hypothetical scrollbar is detected, we must be sure it's not a `border`

// we make this check conditional for performance reasons

// In cases where the parent is fixed, we must ignore negative scroll in offset calc

// Subtract margins of documentElement in case it's being used as parent

// we do this only on HTML because it's the only element that behaves

// differently when margins are applied to it. The margins are included in

// the box of the documentElement, in the other cases not.

// Attach marginTop and marginLeft because in some circumstances we may need them

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */

// Handle viewport case

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */

// Handle other cases based on DOM element used as boundaries

// In case of HTML, we need a different computation

// for all the other DOM elements, this one is good

// Add paddings

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */

// Get popper node sizes

// Add position, width and height to our offsets object

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

// use native find if supported

// use `filter` to obtain the same behavior of `find`

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */

// use native findIndex if supported

// use `find` + `indexOf` if `findIndex` isn't supported

// eslint-disable-line dot-notation

// Add properties to offsets to make them a complete clientRect object

// we do this before each modifier to make sure the previous one doesn't

// mess with these values

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Resize event listener on window

// Scroll event listener on scroll parents

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */

// Remove resize event listener on window

// Remove scroll event listener on scroll parents

// Reset state

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

// add unit if the value is numeric and is one of the following

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */

// Get rid of `auto` `auto-start` and `auto-end`

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */

// Use height if placement is left or right and index is 0 otherwise use width

// in this way the first offset will use an axis and the second one

// will use the other one

// If divider is found, we divide the list of values and operands to divide

// them by ofset X and Y.

// Convert the values with units to absolute pixels to allow our computations

// Loop trough the offsets arrays and execute the operations

// Most of the units rely on the orientation of the popper

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */

// separate value from unit

// If it's not a number it's an operator, I guess

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */

/**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */

/**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */

/**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */

/**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */

/**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */

/**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */

/**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */

/**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=100 - Index used to define the order of execution */

/** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */

/** @prop {ModifierFn} */

// if shift shiftvariation is specified, run the modifier

/**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=200 - Index used to define the order of execution */

/** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */

/**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=300 - Index used to define the order of execution */

// If offsetParent is the reference element, we really want to

// go one step up and use the next offsetParent as reference to

// avoid to make this modifier completely useless and look like broken

// NOTE: DOM access here

// resets the popper's position so that the document size can be calculated excluding

// the size of the popper element itself

// restores the original style properties after the offsets have been computed

/**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */

/**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */

/**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */

/**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=400 - Index used to define the order of execution */

/**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=500 - Index used to define the order of execution */

// arrow depends on keepTogether in order to work

// if arrowElement is a string, suppose it's a CSS selector

// if arrowElement is not found, don't run the modifier

// if the arrowElement isn't a query selector we must check that the

// provided DOM node is child of its popper node

//

// extends keepTogether behavior making sure the popper and its

// reference have enough pixels in conjunction

// top/left side

// bottom/right side

// compute center of the popper

// Compute the sideValue using the updated popper offsets

// take popper margin in account because we don't have this info available

// prevent arrowElement from being placed not contiguously to its popper

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */

/** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */

/**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=600 - Index used to define the order of execution */

// if `inner` modifier is enabled, we can't use the `flip` modifier

// seems like flip is trying to loop, probably there's not enough space on any of the flippable sides

// this boolean to detect any flip loop

// this object contains `position`, we want to preserve it along with

// any additional property we may add in the future

/**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */

/**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */

/**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */

/**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */

/**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */

/**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=700 - Index used to define the order of execution */

/** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */

/**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=800 - Index used to define the order of execution */

// Avoid unnecessary DOM access if visibility hasn't changed

/**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=850 - Index used to define the order of execution */

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */

// when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)

// and not the bottom of the html element

// othwerise, we use the standard `top`, `left`, `bottom` and `right` properties

// Attributes

// Update `data` attributes, styles and arrowStyles

/**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

/**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */

/**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */

/**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */

/** @prop {number} order=900 - Index used to define the order of execution */

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */

// any property present in `data.styles` will be applied to the popper,

// in this way we can make the 3rd party modifiers add custom styles to it

// Be aware, modifiers could override the properties defined in the previous

// lines of this modifier!

// any property present in `data.attributes` will be applied to the popper,

// they will be set as HTML attributes of the element

// if arrowElement is defined and arrowStyles has some properties

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */

/** @prop {Function} */

// compute reference element offsets

// compute auto placement, store placement inside the data object,

// modifiers will be able to edit `placement` if needed

// and refer to originalPlacement to know the original value

// Apply `position` to popper before anything else because

// without the position applied we can't guarantee correct computations

/**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */

// We can't use class properties because they don't get listed in the

// class prototype and break stuff like Sinon stubs

// if popper is destroyed, don't perform any further update

// store the computed placement inside `originalPlacement`

// compute the popper offsets

// run the modifiers

// the first `update` will call `onCreate` callback

// the other ones will call `onUpdate` callback

// touch DOM only if `applyStyle` modifier is enabled

// remove the popper if user explicity asked for the deletion on destroy

// do not use `remove` because IE11 doesn't support it

/**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

/**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

/**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */

// make update() debounced, so that it only runs at most once-per-tick

// with {} we create a new object with the options inside it

// init state

// get reference and popper elements (allow jQuery wrappers)

// Deep merge modifiers options

// Refactoring modifiers' list (Object => Array)

// modifiers have the ability to execute arbitrary code when Popper.js get inited

// such code is executed in the same order of its modifier

// they could add new properties to their options configuration

// BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

// fire the first update to position the popper in the right place

// setup event listeners, they will take care of update the position in specific situations

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

/* harmony default export */

/* 57 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 58 */

/* 59 */

// 7.2.2 IsArray(argument)

/* 60 */

// true  -> String#at

// false -> String#codePointAt

/* 61 */

// 7.2.8 IsRegExp(argument)

/* 62 */

// eslint-disable-next-line no-throw-literal

/* 63 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 64 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 65 */

/* 66 */

// V8 ~ Chromium 42- fails only with 5+ elements

// early implementations not supports chaining

// weak collections should not contains .clear method

// create collection constructor

/* 67 */

/* 68 */

// Forced replacement prototype accessors methods

// In FF throws only define methods

// eslint-disable-next-line no-undef, no-useless-call

/* 69 */

// https://tc39.github.io/proposal-setmap-offrom/

/* 70 */

/* , mapFn, thisArg */

/* 71 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 72 */

/* 73 */

/* 74 */

/* 75 */

// IE 8- don't enum bug keys

/* 76 */

/* 77 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 78 */

/* 79 */

/* 80 */

/* 81 */

// 20.2.2.28 Math.sign(x)

/* 82 */

// 20.2.2.14 Math.expm1(x)

/* 83 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 84 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 85 */

// helper for String#{startsWith, endsWith, includes}

/* 86 */

/* 87 */

// check on default Array iterator

/* 88 */

/* 89 */

/* 90 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 91 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 92 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 93 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 94 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 95 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 96 */

// Node.js

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 97 */

// 25.4.1.5 NewPromiseCapability(C)

/* 98 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 99 */

/* 100 */

/* 101 */

/* 102 */

// Don't enum bug & hidden keys

/* 103 */

/* 104 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 105 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 106 */

// 7.2.9 SameValue(x, y)

/* 107 */

/* , ...args */

/* 108 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 109 */

/* 110 */

/* 111 */

/* 112 */

// 20.1.2.3 Number.isInteger(number)

/* 113 */

// 20.2.2.20 Math.log1p(x)

/* 114 */

// 20.2.2.16 Math.fround(x)

/* 115 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 116 */

/* 117 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 118 */

/* 119 */

/* 120 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 121 */

/* 122 */

/* 123 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 124 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- value

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 125 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 126 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

/* 127 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 128 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 129 */

// all object keys, includes non-enumerable and symbols

/* 130 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 131 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 132 */

/* 133 */

// https://github.com/DavidBruant/Map-Set.prototype.toJSON

/* 134 */

/* 135 */

// https://rwaldron.github.io/proposal-math-extensions/

/* 136 */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

// css base code, injected by the css-loader

// eslint-disable-next-line func-names

// return the list of modules as css string

// eslint-disable-next-line prefer-destructuring

// Adapted from convert-source-map (MIT)

// import a list of modules into the list

// eslint-disable-next-line no-param-reassign

// skip already imported module

// this implementation is not 100% perfect for weird media query combinations

// when a module is imported multiple times with different media queries.

// I hope this will never occur (Hey this way we have smaller bundles)

/* 137 */

// Test for IE <= 9 as proposed by Browserhacks

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// Tests for existence of standard globals is to allow style-loader

// to operate correctly into non-standard environments

// @see https://github.com/webpack-contrib/style-loader/issues/177

// Special case to return head of iframe instead of iframe itself

// This will throw an exception if access to iframe is blocked

// due to cross-origin restrictions

// istanbul ignore next

/* istanbul ignore next  */

// For old IE

/* istanbul ignore if  */

// istanbul ignore if

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// tags it will allow on a page

/* 138 */

/* 139 */

// This file can be required in Browserify and Node.js for automatic polyfill

// To use it:  require('es6-promise/auto');

/* 140 */

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */

// If len is 2, that means that we need to schedule an async flush.

// If additional callbacks are queued before the queue is flushed, they

// will be processed by this flush that we are scheduling.

// Store setTimeout reference so es6-promise will be unaffected by

// other code modifying setTimeout (like sinon.useFakeTimers())

// Decide what async method to use to triggering processing of queued callbacks:

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/

// web worker

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

/**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

/**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */

/**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/

/*jshint validthis:true */

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/

// Strange compat..

/*global self*/

// silently ignored

//# sourceMappingURL=es6-promise.map

/* 141 */

/* 142 */

/* 143 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 144 */

/* 145 */

// all enumerable object keys, includes symbols

/* 146 */

/* 147 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 148 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 149 */

/* 150 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 151 */

// 19.1.2.14 Object.keys(O)

/* 152 */

/* 153 */

// 19.1.2.5 Object.freeze(O)

/* 154 */

// 19.1.2.17 Object.seal(O)

/* 155 */

// 19.1.2.15 Object.preventExtensions(O)

/* 156 */

// 19.1.2.12 Object.isFrozen(O)

/* 157 */

// 19.1.2.13 Object.isSealed(O)

/* 158 */

// 19.1.2.11 Object.isExtensible(O)

/* 159 */

// 19.1.3.1 Object.assign(target, source)

/* 160 */

// 19.1.3.10 Object.is(value1, value2)

/* 161 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 162 */

// 19.1.3.6 Object.prototype.toString()

/* 163 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 164 */

// 19.2.4.2 name

/* 165 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 166 */

// 18.2.5 parseInt(string, radix)

/* 167 */

// 18.2.4 parseFloat(string)

/* 168 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 169 */

// V8 ~ Android 4.3-

/* 170 */

// IE7-

/* 171 */

// 20.1.2.1 Number.EPSILON

/* 172 */

// 20.1.2.2 Number.isFinite(number)

/* 173 */

/* 174 */

// 20.1.2.4 Number.isNaN(number)

/* 175 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 176 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 177 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 178 */

// 20.1.2.12 Number.parseFloat(string)

/* 179 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 180 */

// 20.2.2.3 Math.acosh(x)

/* 181 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 182 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 183 */

// 20.2.2.9 Math.cbrt(x)

/* 184 */

// 20.2.2.11 Math.clz32(x)

/* 185 */

// 20.2.2.12 Math.cosh(x)

/* 186 */

/* 187 */

/* 188 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 189 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 190 */

// 20.2.2.21 Math.log10(x)

/* 191 */

/* 192 */

// 20.2.2.22 Math.log2(x)

/* 193 */

/* 194 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 195 */

// 20.2.2.33 Math.tanh(x)

/* 196 */

// 20.2.2.34 Math.trunc(x)

/* 197 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 198 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 199 */

// 21.1.3.25 String.prototype.trim()

/* 200 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 201 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 202 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 203 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 204 */

// 21.1.3.13 String.prototype.repeat(count)

/* 205 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 206 */

// B.2.3.2 String.prototype.anchor(name)

/* 207 */

// B.2.3.3 String.prototype.big()

/* 208 */

// B.2.3.4 String.prototype.blink()

/* 209 */

// B.2.3.5 String.prototype.bold()

/* 210 */

// B.2.3.6 String.prototype.fixed()

/* 211 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 212 */

// B.2.3.8 String.prototype.fontsize(size)

/* 213 */

// B.2.3.9 String.prototype.italics()

/* 214 */

// B.2.3.10 String.prototype.link(url)

/* 215 */

// B.2.3.11 String.prototype.small()

/* 216 */

// B.2.3.12 String.prototype.strike()

/* 217 */

// B.2.3.13 String.prototype.sub()

/* 218 */

// B.2.3.14 String.prototype.sup()

/* 219 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 220 */

// eslint-disable-next-line no-unused-vars

/* 221 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 222 */

/* 223 */

/* 224 */

/* 225 */

/* 226 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 227 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 228 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 229 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 230 */

// fallback for not array-like ES3 strings and DOM objects

/* 231 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 232 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 233 */

// cross-realm fallback

/* 234 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 235 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 236 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 237 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 238 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 239 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 240 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 241 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 242 */

/* 243 */

/* 244 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 245 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 246 */

/* 247 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 248 */

// 21.2.5.14 RegExp.prototype.toString()

/* 249 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 250 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 251 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 252 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 253 */

// may throw

// variable length - can't use forEach

// unwrap

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// constructor polyfill

// 25.4.3.1 Promise(executor)

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 254 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 255 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 256 */

/* 257 */

/* 258 */

/* 259 */

/* 260 */

/* 261 */

/* 262 */

/* 263 */

/* 264 */

/* 265 */

/* 266 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 267 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 268 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 269 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 270 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 271 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 272 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 273 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 274 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 275 */

// 26.1.10 Reflect.isExtensible(target)

/* 276 */

// 26.1.11 Reflect.ownKeys(target)

/* 277 */

// 26.1.12 Reflect.preventExtensions(target)

/* 278 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 279 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 280 */

// https://github.com/tc39/Array.prototype.includes

/* 281 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 282 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

/* 283 */

// https://github.com/mathiasbynens/String.prototype.at

/* 284 */

/* , fillString = ' ' */

/* 285 */

/* 286 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 287 */

/* 288 */

// https://tc39.github.io/String.prototype.matchAll/

/* 289 */

/* 290 */

/* 291 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 292 */

// https://github.com/tc39/proposal-object-values-entries

/* 293 */

/* 294 */

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)

/* 295 */

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)

/* 296 */

// B.2.2.4 Object.prototype.__lookupGetter__(P)

/* 297 */

// B.2.2.5 Object.prototype.__lookupSetter__(P)

/* 298 */

/* 299 */

/* 300 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of

/* 301 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of

/* 302 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of

/* 303 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of

/* 304 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from

/* 305 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from

/* 306 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from

/* 307 */

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from

/* 308 */

// https://github.com/tc39/proposal-global

/* 309 */

/* 310 */

// https://github.com/ljharb/proposal-is-error

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 320 */

/* 321 */

/* 322 */

// http://jfbastien.github.io/papers/Math.signbit.html

/* 323 */

// https://github.com/tc39/proposal-promise-finally

/* 324 */

// https://github.com/tc39/proposal-promise-try

/* 325 */

/* 326 */

/* , targetKey */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask

/* 335 */

// https://github.com/zenparsing/es-observable

/* 336 */

// ie9- setTimeout & setInterval additional parameters fix

/* 337 */

/* 338 */

// TODO: Not spec compliant, should be false.

/* 339 */

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

// If regeneratorRuntime is defined globally and we're in a module,

// make the exports object identical to regeneratorRuntime.

// Don't bother evaluating the rest of this file if the runtime was

// already defined globally.

// Define the runtime globally (as expected by generated code) as either

// module.exports (if we're in a module) or a new, empty object.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// function.sent implementation.

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration. If the Promise is rejected, however, the

// result for this iteration will be rejected with the same

// reason. Note that rejections of yielded Promises are not

// thrown back into the generator function, as is the case

// when an awaited Promise is rejected. This difference in

// behavior between yield and await is important, because it

// allows the consumer to decide what to do with the yielded

// rejection (swallow it and continue, manually .throw it back

// into the generator, abandon iteration, whatever). With

// await, by contrast, there is no opportunity to examine the

// rejection reason outside the generator function, so the

// only option is to throw it from the await expression, and

// let the generator function handle the exception.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Among the various tricks for obtaining a reference to the global

// object, this seems to be the most reliable technique that does not

// use indirect eval (which violates Content Security Policy).

/* 340 */

/* 341 */

// https://github.com/benjamingr/RexExp.escape

/* 342 */

/* 343 */

/* 344 */

// Module

/* 345 */

/* 346 */

/* 347 */

// DOM APIs, for completeness

// Does not start the time, just sets up the members needed.

// setimmediate attaches itself to the global object

// On some exotic environments, it's not clear which object `setimmediate` was

// able to install onto.  Search each possibility in the same order as the

// `setimmediate` library.

/* 348 */

// Spec says greater than zero

// Don't get fooled by e.g. browserify environments.

// The test against `importScripts` prevents this implementation from being installed inside a web worker,

// where `global.postMessage` means something completely different and can't be used for this purpose.

// For non-IE10 modern browsers

// For web workers, where supported

// For IE 6–8

// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted

// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.

// Callback can either be a function or a string

// Copy function arguments

// Store and register the task

// From the spec: "Wait until any invocations of this algorithm started before this one have completed."

// So if we're currently running a task, we'll need to delay this invocation.

// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a

// "too much recursion" error.

/* 349 */

// EXTERNAL MODULE: ./node_modules/es6-promise/auto.js

// EXTERNAL MODULE: ./node_modules/babel-polyfill/lib/index.js

/* istanbul ignore else */

/*#__PURE__*/

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/object.js

// --- Static ---

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/clone-deep.js

// Handle array of path values

// If no path or no object passed

// Handle edge case where user has dot(s) in top-level item field key

// See https://github.com/bootstrap-vue/bootstrap-vue/issues/2762

// Switched to `in` operator vs `hasOwnProperty` to handle obj.prototype getters

// https://github.com/bootstrap-vue/bootstrap-vue/issues/3463

// Handle string array notation (numeric indices only)

// Handle case where someone passes a string of only dots

// Traverse path in object to find result

// We use `!=` vs `!==` to test for both `null` and `undefined`

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/inspect.js

// --- Convenience inspection utilities ---

// Iterate over each prop and recursively freeze it

// If value is a plain object or array, we deepFreeze it

// Breakpoints

// Form controls

// Component specific defaults are keyed by the component

// name (PascalCase) and prop name (camelCase)

// `textVariant` is `null` to inherit the current text color

// `<b-card>` and `<b-card-body>` also inherit this prop

// Chrome default file prompt

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/config-set.js

// TODO: pre-populate with default config values (needs updated tests)

// this.$_config = cloneDeep(DEFAULTS)

// Returns the defaults

// Method to merge in user config parameters

/* istanbul ignore next */

// Special case for breakpoints

/* istanbul ignore if */

// TODO: If we pre-populate the config with defaults, we can skip this line

// Clear the config. For testing purposes only

// Returns a deep copy of the user config

// First we try the user config, and if key not found we fall back to default value

// NOTE: If we deep clone DEFAULTS into config, then we can skip the fallback for get

// Config manager class

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/plugins.js

/**
 * Checks if there are multiple instances of Vue, and warns (once) about possible issues.
 * @param {object} Vue
 */

// Ensure we have a $bvConfig Object on the Vue prototype.

// We set on Vue and OurVue just in case consumer has not set an alias of `vue`.

// Apply the config values

// Return the particular config value for key for if specified,

// otherwise we return the full config (or an empty object if not found)

/* istanbul ignore else: can't test in JSDOM, as it supports passive */

// We do this check to help with vue-test-utils when using v-show

// All browsers support getBoundingClientRect(), except JSDOM as it returns all 0's for values :(

// So any tests that need isVisible will fail in JSDOM

// Except when we override the getBCR prototype in some tests

// Requesting an elements offsetHight will trigger a reflow of the element content

/* istanbul ignore next: reflow doesn't happen in JSDOM */

// Emulate jQuery closest and return `null` if match is the passed in element (root)

// We are checking for `el.classList` existence here since IE 11

// returns `undefined` for some elements (e.g. SVG elements)

// See https://github.com/bootstrap-vue/bootstrap-vue/issues/2713

// Ensure that any leading V is removed from the

// name, as Vue adds it automatically

// Use our "patched" matches function

// Fallback, but not a true polyfill

// Only needed for Opera Mini

/**
 * Plugin install factory function.
 * @param {object} { components, directives }
 * @returns {function} plugin install function
 */

//# sourceMappingURL=lib.esm.js.map

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/bv-transition.js

// Generic Bootstrap v4 fade (no-fade) transition component

// Assumes that `show` class is not required when

// the transition has finished the enter transition

// (show and fade classes are only applied during transition)

// Returns true if the either a $scopedSlot or $slot exists with the specified name

// Ensure names is an array

// Note: in Vue 2.6.x, all named slots are also scoped slots

// Only applicable to the built in transition

// Has no effect if `trans-props` provided

// Can be overridden by user supplied trans-props

// For user supplied transitions (if needed)

// Default the appear classes to equal the enter classes

// Any transition event listeners will get merged here

// We always need `css` true

// `names` can be a string name or an array of names

// Returns an array of rendered VNodes if slot found.

// Returns undefined if not found.

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/button/button-close.js

// Ensure click on button HTML content is also disabled

/* istanbul ignore if: bug in JSDOM still emits click on inner element */

// We've already checked the $router in computeTag(), so isRouterLink() indicates a live router.

// When deferring to Vue Router's router-link, don't use the href attribute at all.

// We return null, and then remove href from the attributes passed to router-link

// Return `href` when explicitly provided

// Reconstruct `href` when `to` used, but no router

// Fallback to `to` prop (if `to` is a string)

// Fallback to `to.path + to.query + to.hash` prop (if `to` is an object)

// Faster than string interpolation

/* must check for length, as we only want to filter empty strings, not things that look falsey! */

// If nothing is provided return the fallback

// If initially shown, we need to set these for SSR

// Ignore if this.show transitions to a boolean value.

// Update the v-model if needed

// Slightly delay the hide to allow any UI updates

// Only emit dismissed events for dismissible or auto dismissing alerts

// Only emit booleans if we weren't passed a number via `this.show`

// undefined

// Add dismiss button

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/alert/alert.js

// Convert `show` value to a number

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/link/link.js

/**
 * The Link component is used in many other BV components.
 * As such, sharing its props makes supporting all its features easier.
 * However, some components need to modify the defaults for their own purpose.
 * Prefer sharing a fresh copy of the props to ensure mutations
 * do not affect other component references to the props.
 *
 * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js
 * @return {{}}
 */

// router-link specific props

// nuxt-link specific prop(s)

// We don't pass `this` as the first arg as we need reactivity of the props

// Stop event from bubbling up

// Kill the event loop attached to this specific `EventTarget`

// Needed to prevent `vue-router` for doing it's thing

/* istanbul ignore next: difficult to test, but we know it works */

// Router links do not emit instance `click` events, so we

// add in an $emit('click', evt) on it's vue instance

// Call the suppliedHandler(s), if any provided

// Emit the global $root click event

// Stop scroll-to-top behavior or navigation on

// regular links when href is just '#'

// We want to overwrite any click handler since our callback

// will invoke the user supplied handler(s) if `!this.disabled`

// Ensure the prop HREF does not exist for router links

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/badge/badge.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/breadcrumb/breadcrumb-link.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/breadcrumb/breadcrumb.js

// Build child nodes from items if given.

// Copy the value here so we can normalize it.

// Auto-detect active by position in list.

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/button/button.js

// --- Constants --

// tri-state prop: true, false or null

// => on, off, not a toggle

// If tag prop is set to `a`, we use a b-link to get proper disabled handling

// Type only used for "real" buttons

// Disabled only set on "real" buttons

// We add a role of button when the tag is not a link or button for ARIA.

// Don't bork any role provided in data.attrs when isLink or isButton

// We set the aria-disabled state for non-standard tags

// For toggles, we need to set the pressed state for ARIA

// autocomplete off is needed in toggle mode to prevent some browsers from

// remembering the previous setting when using the back button.

// Tab index is used when the component is not a button.

// Links are tabbable, but don't allow disabled, while non buttons or links

// are not tabbable, so we mimic that functionality by disabling tabbing

// when disabled, and adding a tabindex of '0' to non buttons or non links.

/* istanbul ignore if: blink/button disabled should handle this */

// Send .sync updates to any "pressed" prop (if .sync listeners)

// Concat will normalize the value to an array

// without double wrapping an array value in an array.

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/button-group/button-group.js

// Pre-set the tabindexes if the markup does not include tabindex="-1" on the toolbar items

// Ensure tabfocus is -1 on any new elements

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/copy-props.js

/**
 * Copies props from one array/object to a new array/object. Prop values
 * are also cloned as new references to prevent possible mutation of original
 * prop object values. Optionally accepts a function to transform the prop name.
 *
 * @param {[]|{}} props
 * @param {Function} transformFn
 */

// Props as an object.

// If the prop value is an object, do a shallow clone to prevent

// potential mutations to the original object.

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/card/card-body.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/card/card-header.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/card/card-footer.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/card/card.js

// Wrap content in card-body

/* istanbul ignore if: this if will probably never be called */

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/directives/visible.js

// `value` is the callback function

/* istanbul ignore else: Until <b-img-lazy> is switched to use this directive */

// Destroy any previous observer

// Create new observer

// Store the current modifiers on the object (cloned)

// v-b-visible

// Private visibility check directive

// Based on IntersectionObserver

// Usage:

//  v-b-visibility.<margin>.<once>="<callback>"

//  Value:

//  <callback>: method to be called when visibility state changes, receives one arg:

//     true:  element is visible

//     false: element is not visible

//     null:  IntersectionObserver not supported

//  Modifiers:

//    <margin>: a positive decimal value of pixels away from viewport edge

//              before being considered "visible". default is 0

//    <once>:   keyword 'once', meaning when the element becomes visible and

//              callback is called observation/notification will stop.

// When used in a render function:

// export default {

//   directives: { 'b-visible': VBVisible },

//   render(h) {

//     h(

//       'div',

//       {

//         directives: [

//           { name: 'b-visible', value=this.callback, modifiers: { '123':true, 'once':true } }

//         ]

//       }

//     )

//   }

// Create the observer instance (if possible)

// Remove any previous observer

// Should only be called once and `callback` prop should be a function

// Create the observer instance

// Future: Possibly add in other modifiers for left/right/top/bottom

// offsets, root element reference, and thresholds

// `null` = 'viewport'

// Pixels away from view port to consider "visible"

// Intersection ratio of el and root (as a value from 0 to 1)

// No IntersectionObserver support, so just stop trying to observe

// Start observing in a `$nextTick()` (to allow DOM to complete rendering)

/* istanbul ignore next: IntersectionObserver not supported in JSDOM */

// Placed in an `if` just in case we were destroyed before

// this `requestAnimationFrame` runs

// Compare value/oldValue and modifiers to see if anything has changed

// and if so, destroy old observer and create new observer

// Re-bind on element

// Remove the observer

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/image/img.js

// Gives fluid images class `w-100` to make them grow to fit container

// rounded can be:

//   false: no rounding of corners

//   true: slightly rounded corners

//   'top': top corners rounded

//   'right': right corners rounded

//   'bottom': bottom corners rounded

//   'left': left corners rounded

//   'circle': circle/oval

//   '0': force rounding off

// Make a blank SVG image

// Blank image with fill template

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/image/img-lazy.js

// If null, a blank image is generated

// Distance away from viewport (in pixels) before being

// considered "visible"

// If IntersectionObserver support is not available, image is always shown

// Ensure the show prop is synced (when no IntersectionObserver)

// Update synched show prop

// If IntersectionObserver is not available, image is always shown

// If IntersectionObserver is not supported, the callback

// will be called with `null` rather than `true` or `false`

// We only add the visible directive if we are not shown

// Visible directive will silently do nothing if

// IntersectionObserver is not supported

// Value expects a callback (passed one arg of `visible` = `true` or `false`)

// Computed value props

// Passthrough props

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/card/card-img-lazy.js

// Copy of `<b-img-lazy>` props, and remove conflicting/non-applicable props

// The `omit()` util creates a new object, so we can just pass the original props

// False out the left/center/right props before passing to b-img-lazy

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/observe-dom.js

/**
 * Observe a DOM element changes, falls back to eventListener mode
 * @param {Element} el The DOM element to observe
 * @param {Function} callback callback to be called on change
 * @param {object} [opts={childList: true, subtree: true}] observe options
 * @see http://stackoverflow.com/questions/3219758
 */

// Return the list of targets

// Targets have changed, so update accordingly

// Update targets array to element

// Add aria attributes to element

// ensure aria-controls is up to date

// Request a state update from targets so that we can ensure

// expanded state is correct

// Ensure the collapse class and aria-* attributes persist

// after element is updated (either by parent re-rendering

// or changes to this element or it's contents

// Early exit when we have no element

/* istanbul ignore next: difficult to test in JSDOM */

// Handle cases where we might be passed a Vue instance

// Exit and throw a warning when `MutationObserver` isn't available

// Define a new observer

// A mutation can contain several change records, so we loop

// through them to see what has changed

// We break out of the loop early if any "significant" change

// has been detected

// The mutation record

// Mutation type

// Detect whether a change happened based on type and target

// We ignore nodes that are not TEXT (i.e. comments, etc)

// as they don't change layout

// This includes HTMLElement and text nodes being

// added/removed/re-arranged

// We only call the callback if a change that could affect

// layout/size truely happened

// Have the observer observe foo for changes in children, etc

// We return a reference to the observer so that `obs.disconnect()`

// can be called if necessary

// To reduce overhead when the root element is hidden

// Computed property that returns a dynamic function for creating the ID.

// Reacts to changes in both .id and .localId_ And regens a new function

// We return a function that accepts an optional suffix string

// So this computed prop looks and works like a method!!!

// But benefits from Vue's Computed prop caching

// mounted only occurs client side

// Update dom with auto ID after dom loaded to prevent

// SSR hydration errors.

// Disable slide/fade animation

// Enable cross-fade animation instead of slide animation

// Disable wrapping/looping when start/end is reached

// Sniffed by carousel-slide

// Disable pause on hover

// Touch event handling values

// Restarting or Changing interval

// Pausing slide show

// Create private non-reactive props

// Set initial paused state

// Cache current browser transitionend event name

// Fallback

// Get all slides

// Observe child changes so we can update slide list

// Set slide

// Don't animate when page is not visible

/* istanbul ignore if: difficult to test */

// Make sure we have an integer (you never know!)

// Don't do anything if nothing to slide to

// Don't change slide while transitioning, wait until transition is done

// Schedule slide after sliding complete

// Set new slide index

// Wrap around if necessary (if no-wrap not enabled)

// Ensure the v-model is synched up if no-wrap is enabled

// and user tried to slide pass either ends

// Previous slide

// Next slide

// Pause auto rotation

// Start auto rotate slides

/* istanbul ignore next: most likely will never happen, but just in case */

// Don't start if no interval, or less than 2 slides

// Restart auto rotate slides when focus/hover leaves the carousel

// Don't do anything if there aren't any slides to slide to

// Start animating

// Update v-model

// Notify ourselves that we're done sliding (slid)

// Trigger a reflow of next slide

// Transition End handler

/* istanbul ignore if: transition events cant be tested in JSDOM */

/* istanbul ignore next: difficult to test */

// Set up transitionend handler

// Fallback to setTimeout()

// Update slide list

// Get all slides as DOM elements

// Keep slide number in range

// Set slide as active

// Reset touch delta X

// https://github.com/twbs/bootstrap/pull/28558

// Swipe left

// Swipe right

// Ensure swiping with one touch and not pinching

// If it's a touch-enabled device, mouseenter/leave are fired as

// part of the mouse compatibility events on first tap - the carousel

// would stop cycling until user tapped out of it;

// here, we listen for touchend, explicitly pause the carousel

// (as if it's the second time we tap on it, mouseenter compat event

// is NOT fired) and after a timeout (to allow for mouse compatibility

// events to fire) we explicitly restart cycling

// Wrapper for slides

// Indicators

// Touch support event handlers for environment

// Return the carousel

// Attach appropriate listeners (prepend event name with '&' for passive mode)

/* istanbul ignore next: JSDOM doesn't support touch events */

/*#__PURE*/

// Explicitly disable touch if not a child of carousel

// Use local width, or try parent width

// Use local height, or try parent height

// Touch support event handler

/**
     * Safely register event listeners on the root Vue node.
     * While Vue automatically removes listeners for individual components,
     * when a component registers a listener on root and is destroyed,
     * this orphans a callback because the node is gone,
     * but the root does not clear the callback.
     *
     * When registering a $root listener, it also registers a listener on
     * the component's `beforeDestroy` hook to automatically remove the
     * event listener from the $root instance.
     *
     * @param {string} event
     * @param {function} callback
     * @chainable
     */

// Return this for easy chaining

/**
     * Safely register a $once event listener on the root Vue node.
     * While Vue automatically removes listeners for individual components,
     * when a component registers a listener on root and is destroyed,
     * this orphans a callback because the node is gone,
     * but the root does not clear the callback.
     *
     * When registering a $root listener, it also registers a listener on
     * the component's `beforeDestroy` hook to automatically remove the
     * event listener from the $root instance.
     *
     * @param {string} event
     * @param {function} callback
     * @chainable
     */

/**
     * Convenience method for calling vm.$emit on vm.$root.
     * @param {string} event
     * @param {*} args
     * @chainable
     */

// Listen for toggle events to open/close us

// Listen to other collapses for accordion events

// Set up handlers

// Listen for "Sync state" requests from `v-b-toggle`

// Emit a private event every time this component updates to ensure

// the toggle button is in sync with the collapse's state

// It is emitted regardless if the visible state changes

// Trigger state emit if needed

// This should be moved out so we can add cancellable events

// Let v-b-toggle know the state of this collapse

// Tell the other collapses in this accordion to close

// Check to see if the collapse has `display: block !important;` set.

// We can't set `display: none;` directly on this.$el, as it would

// trigger a new transition to start (or cancel a current one).

// If we are in a nav/navbar, close the collapse when non-disabled link clicked

// Only close the collapse if it is not forced to be 'display: block !important;'

// Open this collapse if not shown

// Close this collapse if shown

// Handler for orientation/resize to set collapsed state in nav/navbar

// Add targets array to element

// State is initially collapsed until we receive a state event

// If element is not a button, we add `role="button"` for accessibility

// Store the toggle handler on the element

// Set aria-expanded state

// Set/Clear 'collapsed' class state

// Listen for toggle state changes (public)

// Listen for toggle state sync (private)

// Remove our $root listener

// Reset custom  props

// Reset classes/attrs

// Start by emulating native Event constructor

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/utils/bv-event.class.js

// Merge defaults first, the eventInit, and the type last

// so it can't be overwritten

// Freeze some props as readonly, but leave them enumerable

// Create a private variable using closure scoping

// Recreate preventDefault method. One way setter

// Create `defaultPrevented` publicly accessible prop that

// can only be altered by the preventDefault method

// Declare non-reactive properties

// Named Exports

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/mixins/click-out.js

// @vue/component

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/mixins/dropdown.js

// Return an array of visible items

// Button label

// place on top if possible

// place right if possible

// place left if possible

// Right align menu (default is left align)

// Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)

// Disable auto-flipping of menu from bottom<=>top

// If true, only render menu contents when open

// type: Object,

// Reset value and exit if canceled

// Just in case a child element triggered this.hide(true)

// Hide dropdown if disabled changes to true

// Create non-reactive property

// In case we are inside a `<keep-alive>`

// Event emitter

// Disable totally Popper.js for Dropdown in Navbar

// Ensure other menus are closed

// Are we in a navbar ?

// We should use an injection for this

// for dropup with alignment we use the parent element as popper container

// Make sure we have a reference to an element, not a component!

// Instantiate popper.js

// Wrap in nextTick to ensure menu is fully rendered/shown

// Focus on the menu container on show

// Emit the shown event

// Ensure popper event listeners are removed cleanly

// turn listeners on/off while open

// If another dropdown is opened

// Hide the dropdown when clicked outside

// Hide the dropdown when it loses focus

// Public method to show dropdown

// Wrap in a requestAnimationFrame to allow any previous

// click handling to occur first

// Public method to hide dropdown

// Child element is closing the dropdown on click

// Called only by a button that toggles the menu

// Toggle visibility

// Called only in split button mode, for the split button

// Called from dropdown menu context

// Close on ESC

// Down Arrow

// Up Arrow

// Return focus to original trigger button

// Document click out listener

// Document focusin listener

// If focus leaves dropdown, hide it

// Keyboard nav

// Ignore key up/down on form elements

/* istanbul ignore next: should never happen */

// Get all items

// This really should be toggleLabel

// String: `scrollParent`, `window` or `viewport`

// HTMLElement: HTML Element reference

// Position `static` is needed to allow menu to "breakout" of the scrollParent boundaries

// when boundary is anything other than `scrollParent`

// See https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786

// click

// Dropdown item CSS selectors

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-item.js

// Close on next animation frame to allow <b-link> time to process

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-item-button.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-header.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-divider.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-form.js

// Tab index of -1 for keyboard navigation

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-text.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/dropdown/dropdown-group.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/embed/embed.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form/form-datalist.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form/form-text.js

// Added here for convenience

// Tri-state prop: true, false, null (or undefined)

// If not a boolean, ensure that value is null

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/layout/col.js

// Generates a prop object with a type of `[Boolean, String, Number]`

// Grab the breakpoints from the cached config (exclude the '' (xs) breakpoint)

// We filter out the '' breakpoint (xs), as making a prop name ''

// would not work. The `cols` prop is used for `xs`

// Supports classes like: .col-sm, .col-md-6, .col-lg-auto

// Return the generated props

// For loop doesn't need to check hasOwnProperty

// when using an object created from null

// Generic flexbox .col (xs)

// .col-[1-12]|auto  (xs)

// Flex alignment

// Handling the boolean style prop when accepting [Boolean, String, Number]

// means Vue will not convert <b-col sm></b-col> to sm: true for us.

// Since the default is false, an empty string indicates the prop's presence.

// .order-md-6

// eslint-disable-next-line no-return-assign

// Allow props to be lazy evaled on first access and

// then they become a non-getter afterwards.

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get#Smart_self-overwriting_lazy_getters

// Loop through `col`, `offset`, `order` breakpoint props

// Returns colSm, offset, offsetSm, orderMd, etc.

// computeBreakpoint(col, colSm => Sm, value=[String, Number, Boolean])

// If a class is returned, push it onto the array.

// Default to .col if no other col-{bp}-* classes generated nor `cols` specified.

// Generates a prop object with a type of `[String, Number]`

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-group/form-group.js

// Utils

// Mixins

// Sub components

// Component name

// i.e. label-cols, label-cols-sm, label-cols-md, ...

// label-align, label-align-sm, label-align-md, ...

// left, right, center

// Generate the labelCol breakpoint props

// Enable tooltip style feedback

// Grab the value if the label column breakpoint prop

// Handle case where the prop's value is an empty string,

// which represents true

// Ensure column size is greater than 0

// Convert to column size to number

// Add the prop to the list of props to give to b-col

// If breakpoint is '' (labelCols=true), then we use the

// col prop to make equal width at xs

// Add it to the props

// Assemble the label column breakpoint align classes

// Determine if the resultant form-group will be rendered

// horizontal (meaning it has label-col breakpoints)

// Used for computing aria-describedby

// Screen readers will read out any content linked to by aria-describedby

// even if the content is hidden with `display: none;`, hence we only include

// feedback IDs if the form-group's state is explicitly valid or invalid.

// Set the aria-describedby IDs on the input specified by label-for

// We do this in a nextTick to ensure the children have finished rendering

// if only a single input, focus it, emulating label behaviour

// Sets the `aria-describedby` attribute on the input if label-for is set.

// Optionally accepts a string of IDs to remove as the second parameter.

// Preserves any aria-describedby value(s) user may have on input.

// Update ID list, preserving any original IDs

// and ensuring the ID's are unique

// No IDs, so remove the attribute

// Render label/legend inside b-col if necessary

// We add a tab index to legend so that screen readers

// will properly read the aria-labelledby in IE.

// When horizontal or if a legend is rendered, add col-form-label

// for correct sizing as Bootstrap has inconsistent font styling

// for legend in non-horizontal form-groups.

// See: https://github.com/twbs/bootstrap/issues/27805

// Emulate label padding top of 0 on legend when not horizontal

// If not horizontal and not a legend, we add d-block to label

// so that label-align works

// If state is explicitly false, always show the feedback

// If state is explicitly true, always show the feedback

// Form help text (description)

// Only apply aria-labelledby if we are a horizontal fieldset

// as the legend is no longer a direct child of fieldset

// Only apply aria-describedby IDs if we are a fieldset

// as the input will have the IDs when not a fieldset

// Assumes that the first argument is an array

// Selector for finding first input in the form-group

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/mixins/form-radio-check.js

// Only applicable in standalone mode (non group)

// Only applicable when rendered with button style

// Placed on the input if present.

// Is this check/radio a child of check-group or radio-group?

// Support button style in single input mode

// Custom switch styling (checkboxes only)

// Child can be disabled while parent isn't, but is always disabled if group is

// Required only works when a name is provided for the input(s)

// Child can only be required when parent is

// Groups will always have a name (either user supplied or auto generated)

// Group name preferred over local name

// Local variant preferred over group variant

// default variant

// Same for radio & check

// When in buttons mode, we need to add 'focus' class to label when input focused

// As it is the hidden input which has actual focus

// Convenience methods for focusing the input

// Generate the input element

// Handlers for focus styling when in button mode

// https://github.com/bootstrap-vue/bootstrap-vue/issues/2911

// Button mode

// Standalone button mode, so wrap in 'btn-group-toggle'

// and flag it as inline-block to mimic regular buttons

// Not button mode

// If no label content in plain mode we dont render the label

// Wrap it in a div

// Includes shared render function

// type: [Object, Boolean],

// Not applicable in multi-check mode

// Custom switch styling

// v-model

// Set initial indeterminate state

// Update computedLocalChecked

// Add value to array

// Remove value from array

// Change is only emitted on user interaction

// If this is a child of form-checkbox-group, we emit a change event on it as well

// Indeterminate only supported in single checkbox mode

// Emit update event to prop

// Radio Groups can only have a single value, so determining if checked is simple

// Flags for form-radio-check mixin

// Radio Groups can only have a single value, so our watchers are simple

// If this is a child of form-radio-group, we emit a change event on it as well

// Render as button style

// Checks/Radios tied to the same model must have the same name,

// especially for ARIA accessibility.

// Individual radios or checks can be disabled in a group

// Tabindex to allow group to be focused if needed

// Includes render function

// Range input needs class custom-range

// plaintext not supported by type=range or type=color

// form-control not used by type=range or plaintext. Always used by type=color

// Keep the input set to the value before modifiers

// Emulate `.number` modifier behaviour

// Emulate `.trim` modifier behaviour

// Update the v-model

// When the `localValue` hasn't changed but the actual input value

// is out of sync, make sure to change it to the given one.

// Usually casued by browser autocomplete and how it triggers the

// change or input event, or depending on the formatter function.

// https://github.com/bootstrap-vue/bootstrap-vue/issues/2657

// https://github.com/bootstrap-vue/bootstrap-vue/issues/3498

/* istanbul ignore next: hard to test */

// `evt.target.composing` is set by Vue

// https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js

/* istanbul ignore if: hard to test composition events */

// Exit when the `formatter` function strictly returned `false`

// or prevented the input event

// Lazy formatter

// Emit native blur event

// For external handler that may want a focus method

// For external handler that may want a blur method

// Expose selectionStart for formatters, etc

// Expose selectionEnd for formatters, etc

// Expose selectionDirection for formatters, etc

// For external handler that may want a select() method

// For external handler that may want a setSelectionRange(a,b,c) method

// For external handler that may want a setRangeText(a,b,c) method

// Expose validity property

// Expose validationMessage property

// Expose willValidate property

// For external handler that may want a setCustomValidity(...) method

// For external handler that may want a checkValidity(...) method

// For external handler that may want a reportValidity(...) method

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/mixins/form-size.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-input/form-input.js

// Valid supported input types

// value prop defined in form-text mixin

// value: { },

// Disable mousewheel to prevent wheel from changing values (i.e. number/date).

// We only allow certain types

// Turn off listeners when keep-alive component deactivated

// Turn on listeners (if no-wheel) when keep-alive component activated

// We use native events, so that we don't interfere with propgation

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-textarea/form-textarea.js

// 'soft', 'hard' or 'off'. Browser default is 'soft'

// Disable the resize handle of textarea

// When in auto resize mode, disable shrinking to content height

// Setting `noResize` to true will disable the ability for the user to

// manually resize the textarea. We also disable when in auto height mode

// Conditionally set the computed CSS height when auto rows/height is enabled

// We avoid setting the style to `null`, which can override user manual resize handle

// We always add a vertical scrollbar to the textarea when auto-height is

// enabled so that the computed height calculation returns a stable value

// Ensure rows is at least 2 and positive (2 is the native textarea value)

// A value of 1 can cause issues in some browsers, and most browsers

// only support 2 as the smallest value

// This is used to set the attribute 'rows' on the textarea

// If auto-height is enabled, then we return `null` as we use CSS to control height

// Called by intersection observer directive

// We use a `$nextTick()` here just to make sure any

// transitions or portalling have completed

// Element must be visible (not hidden) and in document

// Must be checked after above checks

// Get current computed styles

// Height of one line of text in px

// Probe scrollHeight by temporarily changing the height to `auto`

// Place the original old height back on the element, just in case `computedProp`

// returns the same value as before

// Calculate content height in 'rows' (scrollHeight includes padding but not border)

// Calculate number of rows to display (limited within min/max rows)

// Computed height remains the larger of `oldHeight` and new `height`,

// when height is in `sticky` mode (prop `no-auto-shrink` is true)

// Return the new computed CSS height in px units

// Using self instead of this helps reduce code size during minification

// If textarea is within 640px of viewport, consider it visible

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-textarea/index.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-file/form-file.js

// Instruct input to capture from camera

// Draging active

// No file chosen

// Convert selectedFile to an array (if not already one)

// The following test is needed when the file input is "reset" or the

// exact same file(s) are selected to prevent an infinite loop.

// When in `multiple` mode we need to check for two empty arrays or

// two arrays with identical files

// Bootstrap v4 doesn't have focus styling for custom file input

// Firefox has a '[type=file]:focus ~ sibling' selector issue,

// so we add a 'focus' class to get around these bugs

// Add focus styling for custom file input

// Wrapped in try in case IE 11 craps out

// IE 11 doesn't support setting `input.value` to '' or null

// So we use this little extra hack to reset the value, just in case.

// This also appears to work on modern browsers as well.

// Always emit original event

// Check if special `items` prop is available on event (drop mode)

// Can be disabled by setting no-traverse

/* istanbul ignore next: not supported in JSDOM */

// Normal handling

// Convert files to array

// Return file(s) as array

// Return single file object

/* istanbul ignore next: this will probably not happen */

// Triggered when the parent form (if any) is reset

// Based on http://stackoverflow.com/questions/3590058

// Get file

// Inject $path to file obj

// Get folder contents

// Form Input

// Overlay Labels

// Return rendered custom file input

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-select/form-select.js

// Browsers default size to 0, which shows 4 rows in most browsers in multiple mode

// Size of 1 can bork out Firefox

// Custom selects with a size of zero causes the arrows to be hidden,

// so dont render the size attribute in this case

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/form-select/index.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/input-group/input-group-addon.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/input-group/input-group-prepend.js

// pass all our props/attrs down to child, and set`append` to false

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/input-group/input-group-append.js

// pass all our props/attrs down to child, and set`append` to true

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/input-group/input-group.js

// Prepend prop/slot

// Prop

// Slot

// Default slot

// Append prop

// prop

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/jumbotron/jumbotron.js

// Return the jumbotron

// Header

// Lead

// If fluid, wrap content in a container/container-fluid

// Children become a child of a container

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/layout/row.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/list-group/list-group.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/list-group/list-group-item.js

// Add a type for button is one not provided in passed attributes

// Set disabled attribute if button and disabled

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/media/media-aside.js

// As an abstract component, it doesn't appear in the $parent chain of

// components, which means the next parent of any component rendered inside

// of this one will be the parent from which is was portal'd

// Even though we only support a single root element,

// VNodes are always passed as an array

// String: CSS selector,

// HTMLElement: Element reference

// Mainly needed for tooltips/popovers inside modals

// This should be set to match the root element type

// Placed in a nextTick to ensure that children have completed

// updating before rendering in the target

// Get the element which the target should be appended to

// Mount the target

// Initial nodes to be rendered

// Update the content of the target

/* istanbul ignore else: only applicable in Vue 2.5.x */

// We only update the target component if the scoped slot

// function is a fresh one. The new slot syntax (since Vue 2.6)

// can cache unchanged slot functions and we want to respect that here

// We also need to be back compatible with non-scoped default slot (i.e. 2.5.x)

// Update the scoped slot function cache

// Unmount the target

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/mixins/scoped-style-attrs.js

// Transitioning to modal(s) open

// Transitioning to modal(s) closed

// Public methods

// Register the modal if not already registered

// Add modal to modals array

// Remove modal from modals array

// Reset the modal's data

// Create a temporary `div.modal-backdrop` to get computed z-index

// Create a temporary `div.measure-scrollbar` to get computed z-index

// Private methods

// We update data values on each modal

// Determine if the body element is overflowing

// Storage place to cache changes to margins and padding

// Note: This assumes the following element types are not added to the

// document after the modal has opened.

// Adjust fixed content padding

// Adjust sticky content margin

// Adjust <b-navbar-toggler> margin

// Adjust body padding

// Restore fixed content padding

// Restore sticky content and navbar-toggler margin

// Restore body padding

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/modal/helpers/modal-manager.js

/**
 * Private ModalManager helper
 * Handles controlling modal stacking zIndexes and body adjustments/classes
 */

// Default modal backdrop z-index

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/modal/helpers/bv-modal-event.class.js

// Freeze our new props as readonly, but leave them enumerable

// Named exports

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/modal/modal.js

// If the element has focus, then return true

// If modal should not be in document

// Controls modal visible state

// Used for style control

// To signal that the modal is in the process of opening

// To signal that the modal is in the process of closing

// Used to signify if click out listener should ignore the click

// The following items are controlled by the modalManager instance

// Needed to fix issue https://github.com/bootstrap-vue/bootstrap-vue/issues/3457

// Even though we are using v-show, we must ensure 'none' is restored in the styles

// Styles needed for proper stacking of modals

// Define non-reactive properties

// Set initial z-index as queried from the DOM

// Listen for events from others to either open or close ourselves

// and listen to all modals to enable/disable enforce focus

// Listen for `bv:modal::show events`, and close ourselves if the

// opening modal not us

// Initially show modal?

// Ensure everything is back to normal

// Private method to update the v-model

// Private method to create a BvModalEvent object

// Default options

// Options that can't be overridden

// Public method to show modal

// If we are in the process of closing, wait until hidden before re-opening

// Set the element to return focus to when closed

// Don't show if canceled

// Ensure the v-model reflects the current state

// Show the modal

// Public method to hide modal

// We emit specific event for one of the three built-in buttons

// Hide if not canceled

// Ensure v-model reflects current state

// Stop observing for content changes

// Trigger the hide transition

// Public method to toggle modal visibility

// Private method to get the current document active element

// Note: On IE11, `document.activeElement` may be null.

// So we test it for truthiness first.

// https://github.com/bootstrap-vue/bootstrap-vue/issues/3206

// Returning focus to document.body may cause unwanted scrolls, so we

// exclude setting focus on body

// Preset the fallback return focus value if it is not set

// `document.activeElement` should be the trigger element that was clicked or

// in the case of using the v-model, which ever element has current focus

// Will be overridden by some commands such as toggle, etc.

// Private method to get a list of all tabable elements within modal content

// Find all tabable elements in the modal content

// Assumes users have not used tabindex > 0 on elements!

// Private method to finish showing modal

/* istanbul ignore next: commenting out for now until we can test stacking */

// If another modal(s) is already open, wait for it(them) to close

// Place modal in DOM

// We do this in `$nextTick()` to ensure the modal is in DOM first

// before we show it

// In a nextTick in case modal content is lazy

// Observe changes in modal content and adjust if necessary

// Transition handlers

// We use `requestAF()` to allow transition hooks to complete

// before passing control over to the other handlers

// This will allow users to not have to use `$nextTick()` or `requestAF()`

// when trying to pre-focus an element

// Delayed in a `$nextTick()` to allow users time to pre-focus

// an element if the wish

// Remove the 'show' class

// TODO: Need to find a way to pass the `trigger` property

//       to the `hidden` event, not just only the `hide` event

// We emit on root first incase a global listener wants to cancel

// the event first before the instance emits it's event

// UI event handlers

// Watch to see if the matching mouseup event occurs outside the dialog

// And if it does, cancel the clickOut handler

// Click was initiated inside the modal content, but finished outside.

// Set by the above onDialogMousedown handler

// Do nothing if not visible, backdrop click disabled, or element

// that generated click event is no longer in document body

// If backdrop clicked, hide modal

// If ESC pressed, hide modal

// If focus leaves modal content, bring it back

// If user pressed TAB out of modal into our bottom trab trap element

// Find the first tabable element in the modal content and focus it

// Focus was successful

// Otherwise focus the modal content container

// Turn on/off focusin listener

// Resize listener

// These events should probably also check if

// body is overflowing

// Root listener handlers

// If another modal opens, close this one if stacking not permitted

// Focus control handlers

// Don't try and focus if we are SSR

// If the modal contains the activeElement, we don't do anything

// Focus the element

// Make sure top of modal is showing (if longer than the viewport)

// Prefer `returnFocus` prop over event specified

// `return_focus` value

// Is el a string CSS selector?

// Possibly could be a component reference

// Modal header

// Modal body

// Modal footer

// Assemble modal content

// Tab trap to prevent page from scrolling to next element in

// tab index during enforce focus tab cycle

// Modal dialog wrapper

// Modal

// Wrap modal in transition

// Sadly, we can't use BVTransition here due to the differences in

// transition durations for .modal and .modal-dialog. Not until

// issue https://github.com/vuejs/vue/issues/9986 is resolved

// Modal backdrop

// If the parent has a scoped style attribute, and the modal

// is portalled, add the scoped attribute to the modal wrapper

// Assemble modal and backdrop in an outer <div>

// eslint-disable-next-line no-shadow-restricted-names

// ObserveDom config to detect changes in modal content

// so that we can adjust the modal padding if needed

// Plugin for adding `$bvModal` property to all Vue instances

// $bvModal injection

// Create an instance of `BMsgBox` component

// We set parent as the local VM so these modals can emit events on

// the app `$root`, as needed by things like tooltips and popovers

// And it helps to ensure `BMsgBox` is destroyed when parent is destroyed

// Preset the prop values

// Defaults that user can override

// Props that can't be overridden

// Convert certain props to scoped slots

// Return a promise that resolves when hidden, or rejects on destroyed

// Can be a string, or array of VNodes.

// Alternatively, user can use HTML version of prop to pass an HTML string.

// If resolver didn't cancel hide, we resolve

// Create a mount point (a DIV) and mount the msgBo which will trigger it to show

// Create a private sub-component that extends BModal

// which self-destructs after hidden

// Make sure we not in document any more

// In a `setTimeout()` to release control back to application

// Self destruct handler

// Self destruct on route change

// Self destruct if parent destroyed

// Self destruct after hidden

// Show the `BMsgBox`

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/modal/helpers/bv-modal.js

// Assign the new properties to this instance

// Set these properties as read-only and non-enumerable

// --- Instance methods ---

// Show modal with the specified ID args are for future use

// Hide modal with the specified ID args are for future use

// The following methods require Promise support!

// IE 11 and others do not support Promise natively, so users

// should have a Polyfill loaded (which they need anyways for IE 11 support)

// Open a message box with OK button only and returns a promise

// Add in overrides and our content prop

// Pick the modal props we support from options

// Always resolve to true for OK

// Open a message box modal with OK and CANCEL buttons

// and returns a promise

// Set the modal props we support from options

// Method to generate the on-demand modal message box

// Returns a promise that resolves to a value returned by the resolve

// Add our instance mixin

// Because we need access to `$root` for `$emits`, and VM for parenting,

// we have to create a fresh instance of `BvModal` for each VM

// Define our read-only `$bvModal` instance property

// Placed in an if just in case in HMR mode

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/nav/nav.js

// -- Constants --

// Set to true if placing in a card header

// Normalize value

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/nav/nav-item.js

// We transfer the listeners to the link

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/nav/nav-form.js

// Signal to dropdown mixin that we are in a navbar

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/navbar/navbar.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/navbar/navbar-nav.js

// -- Utils --

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/navbar/navbar-brand.js

// Stop page from scrolling

// Trigger the click event on the link

// -1 signifies no page initially selected

// Determine if we should show the the ellipsis

// Special Case: Less pages available than the limit of displayed pages

// We are near the beginning of the page list

// We are near the end of the list

// We are somewhere in the middle of the page list

// Sanity checks

// Generates the pageList array

// We limit to a total of 3 page buttons on XS screens

// So add classes to page links to hide them for XS breakpoint

// Note: Ellipsis will also be hidden on XS screens

// TODO: Make this visual limit configurable based on breakpoint(s)

// THe following is a bootstrap-vue custom utility class

// Keep leftmost 3 buttons visible when current page is first page

// Keep rightmost 3 buttons visible when current page is last page

// Hide all except current page, current page - 1 and current page + 1

// hide some left button(s)

// hide some right button(s)

// Emit null if no page selected

// Set our default values in data

// Sanity check

// Return only buttons that are visible

// We do this in next tick to ensure buttons have finished rendering

// Fallback if current page is not in button list

// Goto First Page button bookend

// Goto Previous page button bookend

// First Ellipsis Bookend

// Individual Page links

// ARIA "roving tabindex" method

// Active page will have tabindex of 0, or if no current page and first page button

// Last Ellipsis Bookend

// Goto Next page button bookend

// Goto Last Page button bookend

// Assemble the pagination buttons

// if we are pagination-nav, wrap in '<nav>' wrapper

// Used for watching changes to `perPage` and `numberOfPages`

// If the page size changes, reset to page 1

// If `numberOfPages` changes and is less than

// the `currentPage` number, reset to page 1

// Set the initial page count

// Set the initial page value

// If this value parses to NaN or a value less than 1

// Trigger an initial emit of 'null' if no page specified

// These methods are used by the render function

// Handle edge cases where number of pages has changed (i.e. if perPage changes)

// This should normally not happen, but just in case.

// Emit event triggered by user interaction

// Keep the current button focused if possible

// Always '#' for pagination component

// Optional array of page links

// Disable auto page number detection if true

// Used by render function to trigger wrapping in '<nav>' element

// Returns the value prop as a number or `null` if undefined or < 1

// We only add the watcher if vue router is detected

// Dont do anything if clicking the current active page

// Done in in requestAF() to allow browser to complete the

// native browser click handling of a link

// Done in a nextTick() to ensure rendering complete

// Normalize link for router use

// Make sure text has a value

// The following props are only used if BLink detects router

// nuxt-link specific prop

// Given a to (or href string), convert to normalized route-like structure

// Works only client side!!

// Convert the `to` to a HREF via a temporary `a` tag

// We need to add the anchor to the document to make sure the

// `pathname` is correctly detected in any browser (i.e. IE)

// Once href is assigned, the link will be normalized to the full URL bits

// Remove link from document

// Return the location in a route-like object

// Given a to (or href string), convert to normalized route location structure

// works only when router available!!

// This section only occurs if we are client side, or server-side with $router

// Loop through the possible pages looking for a match until found

// Current route (if router available)

// Current page full HREF (if client side). Can't be done as a computed prop!

// Resolve the page via the $router

// We set currentPage to 0 to trigger an $emit('input', null)

// As the default for this.currentPage is -1 when no value is specified

// And valid page numbers are greater than 0

// Element that the tooltip/popover is positioned relative to

// 'scrollParent', 'viewport', 'window', or Element

// Tooltip/popover will try and stay away from

// boundary edge by this many pixels

// The minimum distance (in `px`) from the edge of the

// tooltip/popover that the arrow can be positioned

// reactive props set by parent

// State related data

// Overridden by template component

// `arrow.element` can also be a reference to an HTML Element

// maybe we should make this a `$ref` in the templates?

// Handle flipping arrow classes

/* istanbul ignore next: can't test in JSDOM */

// Note: We are created on-demand, and should be guaranteed that

// DOM is rendered/ready by the time the created hook runs

// Ensure we show as we mount

// Create popper instance before shown

// Self destruct once hidden

// If parent is destroyed, ensure we are destroyed

// Ensure that the attachment position is correct before mounting

// as our propsData is added after `new Template({...})`

// TBD

// Update popper if needed

// TODO: Should this be a watcher on `this.popperConfig` instead?

// Make sure template is removed from DOM

// "Public" method to trigger hide template

// Private

// Could set a ref for the arrow element

// We use `el` rather than `this.$el` just in case the original

// mountpoint root element type was changed by the template

// Callback used by popper to adjust the arrow placement

// Will be overridden by templates

// Note: `show` and 'fade' classes are only appled during transition

// Transitions as soon as mounted

// Events used by parent component/instance

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/tooltip/helpers/bv-tooltip-template.js

// Other non-reactive (while open) props are pulled in from BVPopper

// Used only by the directive versions

// We use data, rather than props to ensure reactivity

// Parent component will directly set this data

// Used for hover/focus trigger listeners

// Title can be a scoped slot function

// Directive versions only

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/tooltip/helpers/bv-tooltip.js

// Tooltip "Class" (Built as a renderless Vue instance)

// Handles trigger events, etc.

// Instantiates template on demand

// Text string or Scoped slot function

// String

// String, Array, Object

// String or array of Strings (overwritten by BVPopper)

// String (overwritten by BVPopper)

// String or array of strings

// Element or Component reference (or function that returns element) of

// the element that will have the trigger events bound, and is also

// default element for positioning

// HTML ID, Element or Component reference

// 'body'

// Boolean

// 'scrollParent', 'viewport', 'window', Element, or Component reference

// boundary edge by this many pixels (Number)

// Arrow offset (Number)

// Hover/focus delay (Number or Object)

// Arrow of Tooltip/popover will try and stay away from

// the edge of tooltip/popover edge by this many pixels

// Disabled state (Boolean)

// ID to use for tooltip/popover

// Flag used by directives only, for HTML content

// State management data

// manual: false,

// Overwritten by BVPopover

// Normalizes delay into object form

// Returns the triggers in sorted array form

// TODO: Switch this to object form for easier lookup

// Triggers have changed, so re-register them

// Disable trigger listeners

// Clear any active triggers that are no longer in the list of triggers

// Re-enable the trigger listeners

// If any of the while open reactive "props" change,

// ensure that the template updates accordingly

// Create non-reactive properties

// Destroy ourselves when the parent is destroyed

// Copy the parent's scoped style attribute

// Set up all trigger handlers and listeners

// Usually called when the slots/data changes

// In a keepalive that has been deactivated, so hide

// the tooltip/popover if it is showing

// Remove all handler/listeners

// Clear any timeouts/Timers

// Methods for creating and destroying the template

// Overridden by BVPopover

// If the title has updated, we may need to handle the title

// attribute on the trigger target. We only do this while the

// template is open

// Creates the template instance and show it

// this.destroyTemplate()

// The following is not reactive to changes in the props data

// These values cannot be changed while template is showing

// We set the initial reactive data (values that can be changed while open)

// Template transition phase events (handled once only)

// When the template has mounted, but not visibly shown yet

// When the template has completed showing

// When the template has started to hide

// When the template has completed hiding

// When the template gets destroyed for any reason

// Convenience events from template

// To save us from manually adding/removing DOM

// listeners to tip element when it is open

// Mount (which triggers the `show`)

// Trigger the template to start hiding

// The template will emit the `hide` event after this and

// then emit the `hidden` event once it is fully hidden

// The `hook:destroyed` will also be called (safety measure)

// Destroy the template instance and reset state

// Update our template title/content "props"

// So that the template updates accordingly

// Only update the values if they have changed

// Show and Hide handlers

// Show the tooltip

// In the process of showing

// Create a cancelable BvEvent

/* istanbul ignore next: ignore for now */

// Don't show if event cancelled

// Destroy the template (if for some reason it was created)

// Clear the localShow flag

// Fix the title attribute on target

// Set aria-describedby on target

// Create and show the tooltip

// Hide the tooltip

// Emit cancelable BvEvent 'hide'

// We disable cancelling if `force` is true

// Tell the template to hide

// TODO: The following could be added to `hideTemplate()`

// Clear out any stragging active triggers

// Reset the hover state

// Disable while open listeners/watchers

// This is also done in the template `hide` evt handler

// Clear any hover enter/leave event

// Disable the fade animation on the template

// Hide the tip (with force = true)

// Create a non-cancelable BvEvent

// Handlers for template events

// When template is inserted into DOM, but not yet shown

// Enable while open listeners/watchers

// When template show transition completes

// Emit a non-cancelable BvEvent 'shown'

// When template is starting to hide

// When template has completed closing (just before it self destructs)

// TODO:

//   The next two lines could be moved into `destroyTemplate()`

// Utility methods

// Handle case where target may be a component ref

// If an ID

// If an element ref

// If a function

// This is the target that the tooltip will be placed on, which may not

// necessarily be the same element that has the trigger event listeners

// For now, this is the same as target

//   Add in child selector support

//   Add in visibility checks for this element

//   Fallback to target if not found

// Returns the ID of the trigger element

// Handle case where container may be a component ref

// If we are in a modal, we append to the modal instead

// of body, unless a container is specified

//   Template should periodically check to see if it is in dom

//   And if not, self destruct (if container got v-if'ed out of DOM)

//   Or this could possibly be part of the visibility check

// Returns true if trigger is a dropdown

// Returns true if trigger is a dropdown and the dropdown menu is open

// Add aria-describedby on trigger element, without removing any other IDs

// Update/add aria-described by

// Remove aria-describedby on trigger element, without removing any other IDs

// Update or remove aria-describedby

// If the target has a title attribute, null it out and

// store on data-title

// We only update title attribute if it has a value

// If target had a title, restore the title attribute

// and remove the data-title attribute

// BvEvent helpers

// Defaults to a non-cancellable event

// Emits a BvEvent on $root and this instance

// Emit an event on $root

// Event handler setup methods

// Enable trigger event handlers

// Listen for global show/hide events

// Set up our listeners on the target trigger element

// Used to close $tip when element looses focus

// Remove trigger event handlers

// Stop listening for global show/hide/enable/disable events

// Clear out any active target listeners

// Listen for global `bv::{hide|show}::{tooltip|popover}` hide request event

// Events that are only registered when the template is showing

// Modal close events

// Dropdown open events (if we are attached to a dropdown)

// Periodic $element visibility check

// For handling when tip target is in <keepalive>, tabs, carousel, etc

// On-touch start listeners

// Handler for periodic visibility check

// Target element is no longer visible or not in DOM, so force-hide the tooltip

// Handle case where tooltip/target is in a modal

// We can listen for modal hidden events on `$root`

// If this is a touch-enabled device we add extra empty

// `mouseover` listeners to the body's immediate children

// Only needed because of broken event delegation on iOS

// https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

// We can listen for dropdown shown events on it's instance

//   We could grab the ID from the dropdown, and listen for

//   $root events for that particular dropdown id

//   Dropdown shown and hidden events will need to emit

//   Note: Dropdown auto-ID happens in a `$nextTick()` after mount

//         So the ID lookup would need to be done in a `$nextTick()`

// Event handlers

// General trigger event handler

// target is the trigger element

// `mouseenter` is a non-bubbling event

// `focusin` is a bubbling event

// `evt` includes `relatedTarget` (element loosing focus)

// `focusout` is a bubbling event

// `mouseleave` is a non-bubbling event

// `tip` is the template (will be null if not open)

// `evtTarget` is the element which is loosing focus/hover and

// From tip to target

// From target to tip

// Within tip

// Within target

// If focus/hover moves within `tip` and `target`, don't trigger a leave

// Otherwise trigger a leave

// Programmatically hide tooltip or popover

// Close all tooltips or popovers, or this specific tip (with ID)

// Programmatically show tooltip or popover

// Open all tooltips or popovers, or this specific tip (with ID)

// Programmatically disable tooltip or popover

// Disable all tooltips or popovers (no ID), or this specific tip (with ID)

// Programmatically enable tooltip or popover

// Enable all tooltips or popovers (no ID), or this specific tip (with ID)

// Manual toggle handler

// Should we register as an active trigger?

// this.activeTrigger.manual = !this.activeTrigger.manual

// Opening trigger handler

// Note: Click events are sent with evt === null

// Closing trigger handler

// Special case for `blur`: we clear out the other triggers

// Added in by BPopover

// content: {

//   type: String,

//   default: undefined

// },

// String ID of element, or element/component reference

// Or function that returns one of the above

// default: undefined,

// String: scrollParent, window, or viewport

// Element: element reference

// Object: Vue component

// String: HTML ID of container, if null body is used (default)

// HTMLElement: element reference reference

// Object: Vue Component

// ID to use for tooltip element

// If not provided on will automatically be generated

// Data that will be passed to the template and popper

// We use massaged versions of the title and content props/slots

// Pass these props as is

// Used to watch for changes to the title and content props

// We use `forceHide()` to override any active triggers

// TODO: May need to be done in a `$nextTick()`

// Watchers for title/content props (prop changes do not trigger the `updated()` hook)

// Non reactive properties

// Update the `propData` object

// Done in a `$nextTick()` to ensure slot(s) have updated

// Shutdown our local event listeners

// Destroy the tip instance

// Instantiate a new BVTooltip instance

// Done in a `$nextTick()` to ensure DOM has completed rendering

// so that target can be found

// Load the on demand child instance

// Ensure we have initial content

// Pass down the scoped style attribute if available

// Pass down the scoped style ID

// Create the instance

// Set the initial data

// Set listeners

// Initially disabled?

// Initially disabled

// Listen to open signals from others

// Listen to close signals from others

// Listen to disable signals from others

// Listen to enable signals from others

// Initially show tooltip?

// Overridden by BPopover

// Tooltip: Default slot is `title`

// Popover: Default slot is `content`, `title` slot is title

// We pass a scoped slot function by default (v2.6x)

// And pass the title prop as a fallback

// Helper methods for `updateContent()`

// --- Template event handlers ---

// Placeholder

// Tip is now showing

// Tip is no longer showing

// Prevent possible endless loop if user mistakenly

// fires `disabled` instead of `disable`

// fires `enabled` instead of `enable`

// --- Local event listeners ---

// Always renders a comment node

//   Future: Possibly render a target slot (single root element)

//   which we can apply the listeners to (pass `this.$el` to BVTooltip)

// Title and content could be a scoped slot function

// Overwrites BVTooltip

// Modal container selector for appending tooltip/popover

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/directives/popover/popover.js

// Key which we use to store tooltip object on element

// We start out with a basic config

// Default set below if needed

// Default of body

// If title is not provided, try title attribute

// Value is popover content (html optionally supported)

// Content generator function

// Value is config object, so merge

// If argument, assume element ID of container element

// Element ID specified as arg

// We must prepend '#' to become a CSS selector

// Try attribute

// Normalize delay

// Process modifiers

// Title/content allows HTML

// No animation

// Placement of popover

// Boundary of popover

// Delay value

// Delay show value

// Delay hide value

// Offset value, negative allowed

// Variant

// Special handling of event trigger modifiers trigger is

// a space separated list

// Parse current config object trigger

// Parse modifiers for triggers

// If modifier is a valid trigger

// Sanitize triggers

// Blur by itself is useless, so convert it to 'focus'

// Use default trigger

// Add the parent's scoped style attribute data

// Before showing the popover, we update the title

// and content if they are functions

// We only update the instance if data has changed

// We only pass data properties that have changed

// If title/content is a function, we execute it here

// We use `componentUpdated` here instead of `update`, as the former

// waits until the containing component and children have finished updating

// Performed in a `$nextTick()` to prevent endless render/update loops

// $parent (this.bvProgress) prop values may take precedence over the following props

// Which is why they are defaulted to null

// Prefer our max over parent setting

// Prefer our variant over parent setting

// Prefer our precision over parent setting

// Prefer our striped over parent setting

// Prefer our animated over parent setting

// Prefer our showProgress over parent setting

// Prefer our showValue over parent setting

// These props can be inherited via the child b-progress-bar(s)

// This prop is not inherited by child b-progress-bar(s)

// Default trigger

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/spinner/spinner.js

// Include content inside links

// Include content inside buttons

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/normalize-fields.js

// Private function to massage field entry into common object format

// If no field provided, take a sample from first record (if exits)

// Normalize array Form

// Full object definition. We use assign so that we don't mutate the original

// Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }

// Label shortcut

// Formatter shortcut

// Fallback to just key

// Ensure we have a unique array of fields and that they have String labels

// We normalize fields into an array of objects

// [ { key:..., label:..., ...}, {...}, ..., {..}]

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-items.js

// Provider mixin adds in `Function` type

// Primary key for record

// If provided the value in each row must be unique!

// `v-model` for retrieving the current displayed rows

// Our local copy of the items

// Must be an array

// `[ { key:..., label:..., ...}, {...}, ..., {..}]`

// Fields as a simple lookup hash object

// Mainly for formatter lookup and use in `scopedSlots` for convenience

// If the field has a formatter, it normalizes formatter to a

// function ref or `undefined` if no formatter

// We use object spread here so we don't mutate the original field object

// Normalize formatter to a function ref or `undefined`

// Return formatter function or `undefined` if none

// Fallback if various mixins not provided

// Current state of sorting, filtering and pagination props/values

// Set `localItems`/`filteredItems` to a copy of the provided array

// Watch for changes on `computedItems` and update the `v-model`

// Watch for context changes

// Emit context information for external paging/filtering/sorting handling

// Initially update the `v-model` of displayed items

// Method to get the formatter method for a given field key

// `this.computedFieldsObj` has pre-normalized the formatter to a

// function ref if present, otherwise `undefined`

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-stacked.js

// Mixin for providing stacked tables

// `true` when always stacked, or returns breakpoint specified

// Ignore special fields that start with `_`

// Ignore fields in the `ignoreFields` array

// Include only fields in the `includeFields` array

// Arrays are also object, and keys just returns the array indexes

// Date objects we convert to strings

// Flag for displaying which empty slot to show and some event triggering

// Where we store the copy of the filter citeria after debouncing

// For watching changes to `filteredItems` vs `localItems`

// Sanitized/normalize filter-function prop

// Return `null` to signal to use internal filter function

// Returns the records in `localItems` that match the filter criteria

// Returns the original `localItems` array if not sorting

// Note the criteria is debounced

// We only do local filtering when requested and there are records to filter

// Otherwise return all items

// Watch for debounce being set to 0

// Watch for changes to the filter criteria, and debounce if necessary

// If we have a debounce time, delay the update of this.localFilter

// Otherwise, immediately update this.localFilter

// Watch for changes to the filter criteria and filtered items vs localItems).

// And set visual state and emit events as required

// Determine if the dataset is filtered or not

// If filter criteria is an empty array or object

// If filter criteria is truthy

// If filter criteria is falsey

// We need to emit a filtered event if isFiltered transitions from true to

// false so that users can update their pagination controls.

// Create non-reactive prop where we store the debounce timer id

// If filter is "pre-set", set the criteria

// This will trigger any watchers/dependants

// Set the initial filtered state.

// In a nextTick so that we trigger a filtered event if needed

// Sanitizes filter criteria based on internal or external filtering

// Could be a string, object or array, as needed by external filter function

// We use `cloneDeep` to ensure we have a new copy of an object or array

// without Vue's reactive observers

// Filter Function factories

// Wrapper factory for external filter functions

// Wrap the provided filter-function and return a new function

// Returns `null` if no filter-function defined or if criteria is falsey

// Rather than directly grabbing `this.computedLocalFilterFn` or `this.filterFunction`

// we have it passed, so that the caller computed prop will be reactive to changes

// in the original filter-function (as this routine is a method)

// Build the wrapped filter test function, passing the criteria to the provided function

// Return the wrapped function

// Generated function returns true if the criteria matches part

// of the serialized data, otherwise false

// Generates the default filter function, using the given filter criteria

// Built in filter can only support strings or RegExp criteria (at the moment)

// Build the regexp needed for filtering

// Escape special `RegExp` characters in the string and convert contiguous

// whitespace to `\s+` matches

// Build the `RegExp` (no need for global flag, as we only need

// to find the value once in the string)

// Generate the wrapped filter test function to use

// Return the generated function

// This searches all row values (and sub property values) in the entire (excluding

// special `_` prefixed keys), because we convert the record to a space-separated

// string containing all the value properties (recursively), even ones that are

// not visible (not specified in this.fields)

// Users can ignore filtering on specific fields, or on only certain fields,

// and can optionall specify searching results of fields with formatter

// TODO: Enable searching on scoped slots

// Generated function returns true if the criteria matches part of

// the serialized data, otherwise false

// We set `lastIndex = 0` on the `RegExp` in case someone specifies the `/g` global flag

// Using `.bind(compareFn)` on the wrapped anonymous function improves

// performance by avoiding the function call setup. We don't use an arrow

// function here as it binds `this` to the `stableSort` context rather than

// the `compareFn` context, which wouldn't give us the performance increase.

// Do localized string comparison

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/sanitize-row.js

// Return a copy of a row after all reserved fields have been filtered out

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-sorting.js

// TODO: Make this tri-state: true, false, null

// This prop is named incorrectly

// It should be `initialSortDirection` as it is a bit misleading

// (not to mention it screws up the ARIA label on the headers)

// Supported localCompare options, see `options` section of:

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare

// String: locale code

// Array: array of Locale strings

// Sort null and undefined to appear last

// Another prop that should have had a better name.

// It should be noSortClear (on non-sortable headers).

// We will need to make sure the documentation is clear on what

// this prop does (as well as in the code for future reference)

// Place the sorting icon on the left of the header cells

// Sorts the filtered items and returns a new array of the sorted items

// or the original items array if not sorted.

// `stableSort` returns a new array, and leaves the original array intact

// Negate result if sorting in descending order

// Call user provided sortCompare routine

// Fallback to built-in defaultSortCompare if sortCompare

// is not defined or returns null/false

// Update .sync props

// Emit update to sort-desc.sync

// Handlers

// Need to move from thead-mixin

// TODO: make this tri-state sorting

// cycle desc => asc => none => desc => ...

// Change sorting direction on current column

// Start sorting this column ascending

// this.localSortDesc = false

// Sorting parameters changed

// methods to compute classes and attrs for thead>th cells

// If sortable and sortIconLeft are true, then place sort icon on the left

// No attributes if not a sortable table

// In case field's label and title are empty/blank, we need to

// add a hint about what the column is about for non-sighted users.

// This is duplicated code from tbody-row mixin, but we need it

// here as well, since we overwrite the original aria-label.

// The correctness of these labels is very important for screen-reader users.

// currently sorted sortable column.

// Not currently sorted sortable column.

// Not using nested ternary's here for clarity/readability

// Default for ariaLabel

// Handle sortDirection setting

// Non sortable column

// Assemble the aria-label attribute value

// Return the attributes

// (All the above just to get these two values)

// Return the items to display in the table

// Apply local pagination

// Grab the current page of data (which may be past filtered items limit)

// `caption-top` is part of table-redere mixin (styling)

// captionTop: {

//   type: Boolean,

//   default: false

// Even though `this.safeId` looks like a method, it is a computed prop

// that returns a new function if the underlying ID changes

// Build the caption

// Exit early when we don't have a target element

// Exit early when element is disabled or a table element

// Ignore the click when it was inside a dropdown menu

// If the label's form control is not disabled then we don't propagate event

// Modern browsers have `label.control` that references the associated input, but IE11

// does not have this property on the label element, so we resort to DOM lookups

// Otherwise check if the event target matches one of the selectors in the

// event filter (i.e. anchors, non disabled inputs, etc.)

// Return `true` if we should ignore the event

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-pagination.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/thead.js

// supported values: 'lite', 'dark', or null

// Pass down any native listeners

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/tfoot.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/tr.js

// Pass native listeners to child

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/table-cell.js

// Injections for feature / attribute detection

// We only support stacked-heading in tbody in stacked mode

// Needed to handle header background classes, due to lack of

// bg color inheritance with Bootstrap v4 tabl css

// Sticky headers only apply to cells in table `thead`

// background color inheritance with Bootstrap v4 table css.

// Sticky column cells are only available in responsive

// mode (horzontal scrolling) or when sticky header mode.

// Applies to cells in `thead`, `tbody` and `tfoot`

// We use computed props here for improved performance by caching

// the results of the string interpolation

// Needed for stickyheader mode as Bootstrap v4 table cells do

// not inherit parent's background-color. Boo!

// the results of the object spread (Object.assign)

// Make sure col/rowspan's are > 0 or null

// Compute role and scope

// We only add scopes with an explicit span of 1 or greater

// Header or footer cells

// th's in tbody

// Add in the stacked cell label data-attribute if in

// stacked mode (if a stacked heading label is provided)

// Transfer any native listeners

// Parse a rowspan or colspan into a digit (or null if < 1 or NaN)

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/th.js

// `data` already includes any listeners

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-thead.js

// 'light', 'dark' or null (or custom)

// Header field (<th>) classes

// In always stacked mode, we don't bother rendering the head/foot.

// Or if no field headings (empty table)

// Refernce to `selectAllRows` and `clearSelected()`, if table is Selectable

// In case field's label and title are empty/blank

// We need to add a hint about what the column is about for non-sighted users

// We only add a tabindex of 0 if there is a head-clicked listener

// Footer will fallback to header slot names

// Add in row select methods

// Passing true to renderThead will make it render a tfoot

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-tfoot.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/tbody.js

// Pass down any listeners

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/td.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-tbody-row.js

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-tbody.js

// Methods for computing classes, attributes and styles for table cells

// Method to get the value for a field

// Factory function methods

// Returns a function to toggle a row's details slot

// Return a row event handler

// If table is busy (via provider) then don't propagate

// Otherwise call the handler

// Row event handlers (will be wrapped by the above rowEvtFactory function)

// Keypress handler

// We also allow enter/space to trigger a click (when row is focused)

// We translate to a row-clicked event

// Keyboard navigation of rows

// Focus first row

// Focus last row

// Focus previous row

// Focus next row

// Render helpers

// Renders a TD or TH for a row's field

// For the Vue key, we concatenate the column index and

// field key (as field keys could be duplicated)

// TODO: Although we do prevent duplicate field keys...

//   So we could change this to: `row-${rowIndex}-cell-${key}`

// Add in rowSelected scope property if selectable rows supported

// The new `v-slot` syntax doesn't like a slot name starting with

// a square bracket and if using in-document HTML templates, the

// v-slot attributes are lower-cased by the browser.

// Switched to round bracket syntax to prevent confusion with

// dynamic slot name syntax.

// We look for slots in this order: `cell(${key})`, `cell(${key.toLowerCase()})`, 'cell()'

// Slot names are now cached by mixin tbody in `this.$_bodyFieldSlotNameCache`

// Will be `null` if no slot (or fallback slot) exists

// Render either a td or th cell

// We wrap in a DIV to ensure rendered as a single cell when visually stacked!

// Renders an item's row (or rows if details supported)

// Create a unique :key to help ensure that sub components are re-rendered rather than

// re-used, which can cause issues. If a primary key is not provided we use the rendered

// rows index within the tbody.

// See: https://github.com/bootstrap-vue/bootstrap-vue/issues/2410

// Selectable classes and attributes

// Row Details slot

// Add the item row

// Should this be `aria-details` instead?

//   Instantiate the following handlers only if we have registered

//   listeners i.e. `this.$listeners['row-middle-clicked']`, etc.

//   Could make all of this (including the above click/key handlers)

//   the result of a factory function and/or make it a delegated event

//   handler on the tbody (if we store the row index as a data-attribute

//   on the TR as we can lookup the item data from the computedItems array

//   or it could be a hidden prop (via attrs) on BTr instance)

// Note: These events are not accessibility friendly!

// Add a hidden row to keep table row striping consistent when details showing

// We don't use `BTr` here as we dont need the extra functionality

// Add the actual details row

// Only add the placeholder if a the table has a row-details slot defined (but not shown)

// Add extra placeholder if table is striped

// Return the row(s)

// Render the tbody element and children

// If table is busy and a busy slot, then return only the busy "row" indicator

// Table isn't busy, or we don't have a busy slot

// Create a slot cache for improved performace when looking up cell slot names.

// Values will be keyed by the field's `key` and will store the slot's name.

// Slots could be dynamic (i.e. `v-if`), so we must compute on each render.

// Used by tbodyRow mixin render helper.

// Created as a non-reactive property so to not trigger component updates.

// Must be a fresh object each render.

// Add static Top Row slot (hidden in visibly stacked mode as we can't control data-label attr)

// render the rows

// Render the individual item row (rows if details slot)

// Empty Items / Empty Filtered Row slot (only shows if items.length < 1)

// Static bottom row slot (hidden in visibly stacked mode as we can't control data-label attr)

// Assemble rows into the tbody

// Return the assembled tbody

// Not sure why this is included, as it will always be an empty array

// Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)

// If in *always* stacked mode, we don't bother rendering the row

// Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)

// Event handler helper

// Render the busy indicator or return `null` if not busy

// Return a busy indicator row, or `null` if not busy

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-selectable.js

// Reset for selectable

// Quick check against array length

// Look for the first non-loosely equal row, after ignoring reserved fields

// `.forEach()` skips over non-existent indices (on sparse arrays)

// Select a particular row (indexed based on computedItems)

// Un-select a particular row (indexed based on `computedItems`)

// Determine if a row is selected (indexed based on `computedItems`)

// Clear any active selected row(s)

// Internal private methods

// Handle row-clicked event

// Clear selection on filter, pagination, and sort changes

/* istanbul ignore if: should never happen */

// Note 'multi' mode needs no special event handling

// range

// Clear range selection if any

// Don't do anything if table is not in selectable mode

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-provider.js

// Prop override(s)

// Adds in 'Function' support

// Additional props

// Passthrough prop. Passed to the context object. Not used by b-table directly

// Used to trigger the provider function via a watcher. Only the fields that

// are needed for triggering a provider update are included. Note that the

// regular this.context is sent to the provider during fetches though, as they

// may need all the prop info.

// Either a string, or could be an object or array.

// Provider update triggering

// If a new provider has been specified, trigger an update

// Trigger the provider to update as the relevant context values have changed.

// Call the items provider if necessary

// Fetch on mount if localItems is empty

// Listen for global messages to tell us to force refresh the table

// Public Method: Force a refresh of the provider function

// Can't force an update when forced busy by user (busy prop === true)

// But if provider running (localBusy), re-schedule refresh once `refreshed` emitted

// Provider related methods

// New root emit

// Refresh the provider function items.

// If table is busy, wait until refreshed before calling again

// Schedule a new refresh once `refreshed` is emitted

// Set internal busy state

// Call provider function with context and optional callback after DOM is fully updated

// Call provider function passing it the context and optional callback

// Provider returned Array data

// Check number of arguments provider function requested

// Provider not using callback (didn't request second argument), so we clear

// busy state as most likely there was an error in the provider function

// Provider returned Promise

// Provider resolved with items

// Provider function borked on us, so we spew out a warning

// and clear the busy state

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/helpers/mixin-table-renderer.js

// Main `<table>` render mixin

// Includes all main table styling options

// Don't place attributes on root element automatically,

// as table could be wrapped in responsive `<div>`

// If a string, it is assumed to be the table `max-height` value

// Layout related computed props

// User supplied classes

// Styling classes

// The following are b-table custom styles

// Stacked table classes

// Selectable classes

// Preserve user supplied aria-describedby, if provided in `$attrs`

// We set `aria-rowcount` before merging in `$attrs`,

// in case user has supplied their own

// Now we can override any `$attrs` here

// Build the `<caption>` (from caption mixin)

// Build the `<colgroup>`

// Build the `<thead>`

// Build the `<tbody>`

// Build the `<tfoot>`

// Assemble `<table>`

// Add responsive/sticky wrapper if needed and return table

// Order of mixins is important!

// They are merged from first to last, followed by this component.

// Required Mixins

// Features Mixins

// Required mixins

// These are pretty lightweight, and are useful for lightweight tables

// feature mixin

// Stacked requires extra handling by users via

// the table cell `stacked-heading` prop

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/table/table.js

// Table helper Mixins

// Main table renderer mixin

// b-table component definition

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/tabs/tabs.js

// Reference to the child <b-tab> instance

// For keyboard navigation

// In keynav mode, SPACE press will also trigger a click/select

// Apply <b-tabs> `activeNavItemClass` styles when the tab is active

// Roving tab index when keynav enabled

// Synonym for 'bottom'

// This prop is sniffed by the <b-tab> child

// Only applied to the currently active <b-nav-item>

// Only applied to the currently active <b-tab>

// Index of current tab

// Array of direct child <b-tab> instances, in DOM order

// Array of child instances registered (for triggering reactive updates)

// Flag to know if we are mounted or not

// This computed prop is sniffed by the tab child

// Ensure only one tab is active at most

// Try next or prev tabs

// Each b-tab will register/unregister itself.

// We use this to detect when tabs are added/removed

// to trigger the update of the tabs.

// If tabs added, removed, or re-ordered, we emit a `changed` event.

// We use `tab._uid` instead of `tab.safeId()`, as the later is changed

// in a nextTick if no explicit ID is provided, causing duplicate emits.

// In a nextTick to ensure currentTab has been set first.

// We emit shallow copies of the new and old arrays of tabs, to

// prevent users from potentially mutating the internal arrays.

// Trigger an update after mounted.  Needed for tabs inside lazy modals.

// Enable or disable the observer

// For SSR and to make sure only a single tab is shown on mount

// We wrap this in a `$nextTick()` to ensure the child tabs have been created

// Call `updateTabs()` just in case...

// Flag we are now mounted and to switch to DOM for tab probing.

// As this.$slots.default appears to lie about component instances

// after b-tabs is destroyed and re-instantiated.

// And this.$children does not respect DOM order.

// Ensure no references to child instances exist

// DOM observer is needed to detect changes in order of tabs

// Make sure no existing observer running

/* istanbul ignore next: difficult to test mutation observer in JSDOM */

// Watch for changes to <b-tab> sub components

// We delay the update to ensure that `tab.safeId()` has

// updated with the final ID value.

// We use registeredTabs as the source of truth for child tab components. And we

// filter out any BTab components that are extended BTab with a root child BTab.

// https://github.com/bootstrap-vue/bootstrap-vue/issues/3260

// DOM Order of Tabs

// We rely on the DOM when mounted to get the 'true' order of the b-tab children.

// querySelectorAll(...) always returns elements in document order, regardless of

// order specified in the selector.

// Stable sort keeps the original order if not found in the

// `order` array, which will be an empty array before mount.

// Update list of <b-tab> children

// Probe tabs

// Find *last* active non-disabled tab in current tabs

// We trust tab state over currentTab, in case tabs were added/removed/re-ordered

// Else try setting to currentTab

// Handle last tab being removed, so find the last non-disabled tab

// Current tab is not disabled

// Else find *first* non-disabled tab in current tabs

// Set the current tab state to active

// tab.localActive = idx === tabIndex && !tab.disabled

// Update the array of tab children

// Set the currentTab index (can be -1 if no non-disabled tabs)

// Find a button that controls a tab, given the tab reference

// Returns the button vm instance

// Force a button to re-render it's content, given a <b-tab> instance

// Called by <b-tab> on `update()`

// Activate a tab given a <b-tab> instance

// Also accessed by <b-tab>

// Couldn't set tab, so ensure v-model is set to `this.currentTab`

/* istanbul ignore next: should rarely happen */

// Deactivate a tab given a <b-tab> instance

// Accessed by <b-tab>

// Focus a tab button given it's <b-tab> instance

// Wrap in `$nextTick()` to ensure DOM has completed rendering/updating before focusing

// Emit a click event on a specified <b-tab> component instance

// Click handler

// Move to first non-disabled tab

// Move to previous non-disabled tab

// Move to next non-disabled tab

// Move to last non-disabled tab

// Ensure at least one tab button is focusable when keynav enabled (if possible)

// Buttons are not in tab index unless active, or a fallback tab

// Place tab button in tab sequence

// Needed to make `this.$refs.buttons` an array

// Main content section

// Render final output

// Don't set a tab index if not rendered inside <b-tabs>

// Sniffed by tabs.js and added to nav 'li.nav-item'

// Sniffed by tabs.js and added to nav 'a.nav-link'

// Is this actually ever used?

// Apply <b-tabs> `activeTabClass` styles when this tab is active

// For parent sniffing of child

// Make 'active' prop work with `.sync` modifier

// If activated post mount

// Tab couldn't be deactivated, so we reset the synced active prop

// Deactivation will fail if no other tabs to activate

// Inform b-tabs of our presence

// Initially show on mount if active and not disabled

// Force the tab button content to update (since slots are not reactive)

// Only done if we have a title slot, as the title prop is reactive

// inform b-tabs of our departure

// Inform `b-tabs` of our presence

// Inform `b-tabs` of our departure

// Render content lazily if requested

// Allowed: 'true' or 'false' or null

// Aria role

/*
    transition: {
      type: [Boolean, String, Object],
      default: false
    }
    */

// Transition classes base name

// Handle bug where enter-to class is not removed.

// Bug is related to portal-vue and transition-groups.

// The *-move class is also stuck on elements that moved,

// but there are no javascript hooks to handle after move.

// We don't render on SSR or if a an existing target found

// Toaster names cannot change once created

// Let toasts made with `this.$bvToast.toast()` know that this toaster

// is being destroyed and should should also destroy/hide themselves

// Remove from DOM if needed

// transition: this.transition || DefaultTransition

// Fallback to null to make sure attribute doesn't exist

// Filter function to filter out disabled tabs

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/toast/toast.js

// Even though the ID prop is provided by idMixin, we

// add it here for $bvToast props filtering

// Switches role to 'status' and aria-live to 'polite'

// Render the toast in place, rather than in a portal-target

// Minimum supported duration is 1 second

// If toaster target changed, make sure toaster exists

// If static changes to true, and the toast is showing,

// ensure the toaster target exists

// Listen for global $root show events

// Listen for global $root hide events

// Make sure we hide when toaster is destroyed

// We show the toast after we have rendered the portal and b-toast wrapper

// so that screen readers will properly announce the toast

// Determine time remaining, and then pause timer

// Restart timer with max of time remaining or 1 second

// We delay the close to allow time for the

// browser to process the link click

// Render helper for generating the toast

// Assemble the header content

// Assemble the header (if needed)

// Toast body

// If scoped styles are applied and the toast is not static,

// make sure the scoped style data attribute is applied

/**
 * Plugin for adding `$bvToast` property to all Vue instances
 */

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/directives/tooltip/tooltip.js

// Default config

// Value is tooltip content (HTML optionally supported)

// Title generator function

// Title allows HTML

// Placement of tooltip

// Boundary of tooltip

// Return the config

// Before showing the tooltip, we update the title if it is a function

// if title is a function, we execute it here

// Performed in a `$nextTick()` to prevent render update loops

// $bvToast injection

// Create a private sub-component constructor that

// extends BToast and self-destructs after hidden

// Ensure the toast has been force hidden

// In a `requestAF()` to release control back to application

// and to allow the portal-target time to remove the content

// Self destruct when toaster is destroyed

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/components/toast/helpers/bv-toast.js

// --- Public Instance methods ---

// Opens a user defined toast and returns immediately

// Create an instance of `BToastPop` component

// We set parent as the local VM so these toasts can emit events on the

// app `$root`, and it ensures `BToast` is destroyed when parent is destroyed

// Convert certain props to slots

// Can be a string, or array of VNodes

// Special case for title if it is a string, we wrap in a <strong>

// Create a mount point (a DIV) and mount it (which triggers the show)

// shows a `<b-toast>` component with the specified ID

// Hide a toast with specified ID, or if not ID all toasts

// Private method to generate the on-demand toast

// we have to create a fresh instance of `BvToast` for each VM

// Define our read-only `$bvToast` instance property

// CONCATENATED MODULE: ./node_modules/bootstrap-vue/esm/directives/scrollspy/scrollspy.class.js

// If argument, assume element ID

// Offset value

// Offset method

// Process value

// Value is a CSS ID or selector

// Value is offset

// Value is config object

// Filter the object based on our supported config options

/*
 * ScrollSpy class definition
 */

/*
 * Constants / Defaults
 */

// The element we activate links in

// Just in case out scroll element has changed

// handle Vue instances

// Schedule a refresh

// We observe both the scroller for content changes, and the target links

// General event handler

// Just in case we are added to the DOM before the scroll target is

// We re-instantiate our listeners, just in case

// Refresh the list of target links on the element we are applied to

// Find all the unique link HREFs that we will control

// Convert HREF into an ID (including # at beginning)

// Find the element with the ID specified by id

// Handle activating/clearing

// Grab the list of target links (<a href="{$target}">)

// This is a dropdown item, so find the .dropdown-toggle and set it's state

// Also set this link's state

// Set triggered link as active

// Handle nav-link inside nav-item, and set nav-item active

// Set triggered links parents as active

// With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

// Handle special case where nav-link is inside a nav-item

// Add active state to nav-item as well

// Signal event to via $root, passing ID of activated target and reference to array of links

// CONCATENATED MODULE: ./components/ap.vue

/* normalize component */

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js

/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).

// This module is a runtime utility for cleaner component module output and will

// be included in the final webpack user bundle.

/* server only */

/* vue-cli only */

// Vue.extend constructor export interop

// render functions

// functional template

// scopedId

// server build

// 2.3 injection

// functional

// 2.2 with runInNewContext: true

// cached call

// stateful

// inject component styles

// register component module identifier for async chunk inferrence

// used by ssr in case component is cached and beforeCreate

// never gets called

// for template-only hot-reload because in that case the render fn doesn't

// go through the normalizer

// register for functioal component in vue file

// inject component registration as beforeCreate hook

// Create an options list from our fields

// Set the initial number of items

// Trigger pagination to update the number of buttons/pages due to filtering

// CONCATENATED MODULE: ./app.js
